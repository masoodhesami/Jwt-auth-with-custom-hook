{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\quera\\\\jwt-auth\\\\src\\\\Pages\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Card from \"../Components/Card\";\nimport Input from \"../Components/Input\";\nimport NotRobot from \"../Components/NotRobot\";\nimport LoginButton from \"../Components/LoginButtons\";\nimport ErrorMessage from \"../Components/ErrorMessage\";\nimport useJWT from \"../Hooks/useJWT\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [noRobot, setNORobot] = useState(true);\n  const [loggedIn, setLoggedIn] = useState(true);\n  const [unValidMail, setUnValidMail] = useState(true);\n  const {\n    login\n  } = useJWT();\n\n  function validateEmail(email) {\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    if (email.match(regexEmail)) {\n      setUnValidMail(false);\n      return true;\n    } else {\n      setUnValidMail(true);\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    validateEmail(email);\n  }, []);\n\n  const clickHandler = async () => {\n    try {\n      if (validateEmail(email) === true) {\n        const accessData = await login(email, password);\n\n        if (accessData) {\n          setData(accessData);\n          setLoggedIn(true);\n          navigate(\"/\");\n          console.log(accessData);\n        }\n      }\n    } catch (err) {\n      setPassword(\"\");\n      setNORobot(true);\n      setLoggedIn(false);\n    }\n  };\n\n  const onChangeEmail = e => {\n    setEmail(e.target.value);\n    validateEmail(e.target.value);\n    console.log(validateEmail(e.target.value));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      \"data-testid\": \"email\",\n      label: \"\\u2709\\uFE0F Email\",\n      type: \"email\",\n      value: email,\n      onChange: e => onChangeEmail(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      \"data-testid\": \"password\",\n      label: \"\\uD83D\\uDD11 Password\",\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), loggedIn === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NotRobot, {\n        checked: noRobot,\n        onChange: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(LoginButton, {\n      onClick: clickHandler,\n      disabled: !(password && email && !unValidMail)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Login, \"gHm0+LEGEvZmml98COkt3mRInGU=\", false, function () {\n  return [useNavigate, useJWT];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["E:/react/quera/jwt-auth/src/Pages/Login.jsx"],"names":["React","useState","useEffect","useNavigate","Card","Input","NotRobot","LoginButton","ErrorMessage","useJWT","Login","props","navigate","email","setEmail","password","setPassword","data","setData","noRobot","setNORobot","loggedIn","setLoggedIn","unValidMail","setUnValidMail","login","validateEmail","regexEmail","match","clickHandler","accessData","console","log","err","onChangeEmail","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {useNavigate} from \"react-router-dom\"\nimport Card from \"../Components/Card\";\nimport Input from \"../Components/Input\";\nimport NotRobot from \"../Components/NotRobot\";\nimport LoginButton from \"../Components/LoginButtons\";\nimport ErrorMessage from \"../Components/ErrorMessage\";\nimport useJWT from \"../Hooks/useJWT\"\n\n\nconst Login = (props) => {\n        const navigate = useNavigate();\n        const [email, setEmail] = useState(\"\");\n        const [password, setPassword] = useState(\"\");\n        const [data, setData] = useState([]);\n        const [noRobot, setNORobot] = useState(true);\n        const [loggedIn, setLoggedIn] = useState(true);\n        const [unValidMail, setUnValidMail] = useState(true);\n        const {login} = useJWT();\n\n        function validateEmail(email) {\n            let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n            if (email.match(regexEmail)) {\n                setUnValidMail(false);\n                return true;\n            } else {\n                setUnValidMail(true);\n                return false;\n            }\n        }\n\n        useEffect(() => {\n            validateEmail(email);\n        }, [])\n\n        const clickHandler = async () => {\n            try {\n                if (validateEmail(email) === true) {\n                    const accessData = await login(email, password);\n                    if (accessData) {\n                        setData(accessData);\n                        setLoggedIn(true);\n                        navigate(\"/\");\n                        console.log(accessData);\n                    }\n                }\n            } catch (err) {\n                setPassword(\"\");\n                setNORobot(true);\n                setLoggedIn(false);\n            }\n        }\n        const onChangeEmail = (e) => {\n            setEmail(e.target.value);\n            validateEmail(e.target.value)\n            console.log(validateEmail(e.target.value))\n        }\n\n\n        return (\n            <Card>\n                <h3>Login</h3>\n\n                <Input\n                    data-testid=\"email\"\n                    label=\"✉️ Email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => onChangeEmail(e)}\n                />\n\n                <Input\n                    data-testid=\"password\"\n                    label=\"🔑 Password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n                {loggedIn === false &&\n                <>\n                    <NotRobot checked={noRobot} onChange={() => {\n                    }}/>\n                    <ErrorMessage/>\n                </>}\n                <LoginButton onClick={clickHandler} disabled={!(password && email && !unValidMail)}\n                />\n            </Card>\n        );\n    }\n;\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}